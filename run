#!/usr/bin/env python3

import enum
from pathlib import Path
import argparse
import os
import subprocess

VIDS_PATH=Path("/storage/emulated/0/Movies")
#VIDS_PATH=Path(".")
VIDS_PREFIX="VID_"
FONT_PATH=Path("./Roboto-Black.ttf")

def get_video_files():
    files = sorted( filter( lambda x: os.path.isfile(os.path.join(VIDS_PATH, x)) and x.startswith("VID_") and x.endswith(".mp4"),
                        os.listdir(VIDS_PATH) ) )
    files.reverse()
    return files

def run_ffmpeg(video, seconds, save_images=False):
    seconds_text = "" if len(seconds) == 0 else f"{str(seconds[0])} +"

    cmd = ["ffmpeg"]
    
    if len(seconds) == 2:
        cmd = cmd + ["-ss", f"{seconds[0]}", "-to", f"{seconds[1]}"]
    
    cmd = cmd + ["-y", "-i", str(video), "-vf", f"drawtext=\"fontfile={str(FONT_PATH)}:fontsize=60:fontcolor=yellow:text=\'{seconds_text} %{{e\\:t}}\':x=(w-text_w):y=(h-text_h) "]
    
    video_origin = os.path.splitext(video)[0]

    if save_images:
        cmd = cmd + [f"{str(video_origin)}_%04d.png"]
    else:
        cmd = cmd + [f"{str(video_origin)}_timestamps.mp4"]

    print(cmd)
    subprocess.run(cmd)
    return

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="run ffmpeg on a video to print timestamp on frames")
    parser.add_argument("seconds", metavar="S", type=int, nargs="*", help="seconds from video to write timestamps to")
    parser.add_argument("--video", help="The name of the video to write to")
    parser.add_argument("--video-path", help="The path of the video to write to")
    parser.add_argument("--video-nth", type=int, help="The number of the video to write to")
    parser.add_argument("--save-images", action="store_true", help="Instead of creating a new video, save all images. WARNING: use only with seconds and with a small interval")
    parser.add_argument("--list", action="store_true", help=f"List videos in {VIDS_PATH}")

    args = parser.parse_args()


    if len(args.seconds) != 0 and len(args.seconds) > 2:
        print(f"There should be only tho seconds at the end, not {len(args.seconds)}")
        exit(0)
    
    if len(args.seconds) == 2 and args.seconds[0] >= args.seconds[1]:
        print(f"First second should be > than the second second. {args.seconds[0]} and {args.seconds[1]} do not respect the rule")
        exit(0)

    use_seconds = True

    if len(args.seconds) == 0:
        use_seconds = False

    videos = get_video_files()

    if args.list:
        print ("files:")
        for i, file in enumerate(videos):
            print(f"{i}: {file}")
        exit(0)

    video = None

    if args.video:
        video = VIDS_PATH / args.video
    
    if args.video_path:
        video = Path(args.video_path)

    if args.video_nth:
        if args.video_nth >= len(videos):
            print(f"There are {len(videos)} files in {VIDS_PATH}. You asked for nr {args.video_nth}")
            exit(0)
        
        video = VIDS_PATH / videos[args.video_nth]
    
    if video is None:
        if len(videos) == 0:
            print(f"There arent any videos in {VIDS_PATH}")
            exit(0)
        video = VIDS_PATH / videos[0]
    
    run_ffmpeg(video, args.seconds, args.save_images)
